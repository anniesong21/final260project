---
title: "wrangle"
format: html
editor: visual
---

```{r}
library(httr2)
library(janitor)
library(tidyverse)
library(stringr)
library(jsonlite)
library(purrr)
library(lubridate)
library(scales)
```

```{r}
# population
# read in csv with population data
pop1 <- read.csv("https://github.com/anniesong21/final260project/blob/main/data/NST-EST2023-ALLDATA.csv?raw=true")

# wrangle pop data

# change state names, clean year names
pop2 <- pop1 |> 
  filter(STATE != 0) |>
  as_tibble() |>
  select(NAME, POPESTIMATE2020, POPESTIMATE2021, POPESTIMATE2022, POPESTIMATE2023) |>
  rename(state_name = NAME) |>
  pivot_longer(-state_name, names_to='year', values_to='population') |>
  mutate(year = str_remove(year, "POPESTIMATE")) |>
  mutate(across(-state_name, as.numeric)) |>
  mutate(state = state.abb[match(state_name, state.name)]) |>
  mutate(state = case_when(state_name == "Puerto Rico" ~ "PR",
                           state_name == "District of Columbia" ~ "DC",
                           .default = state))  |>
  select(year, population, state)
head(pop2)

# 2024 data
twentyfour <- 336673595
tf <- pop1 |>
  filter(NAME == 'United States') |>
  select(NAME, POPESTIMATE2020, POPESTIMATE2021, POPESTIMATE2022, POPESTIMATE2023) |>
  pivot_longer(-NAME, names_to='year', values_to='population') |>
  mutate(year = str_remove(year, "POPESTIMATE")) |>
  mutate(across(-NAME, as.numeric))

twentythree <- 334914895

pop3 <- pop2 |> 
  filter(year == 2023) |>
  mutate(percent = population/twentythree) |>
  mutate(POP2024 = percent*twentyfour)

pop4 <- pop3 |>
  select(POP2024, state) |>
  pivot_longer(-state, names_to='year', values_to='population') |>
  mutate(year = str_remove(year, "POP")) |>
  mutate(across(-state, as.numeric)) 

pop_final <- rbind(pop2, pop4)
```

```{r}
# wrangle
get_cdc_data <- function(url){
    require(httr2)
    ret <-
    request(url) |>
    req_url_query("$limit"=10000000000) |>
    req_perform() |>
    resp_body_json(simplifyDataFrame = TRUE) 
    return(ret)
}

# downloading data
cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
hosp_raw <- get_cdc_data("https://data.cdc.gov/resource/39z2-9zu6.json")
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")

# wrangle cases data
cases <- cases_raw |>
  mutate(cases = parse_number(new_cases),
         date = as_date(ymd_hms(end_date))) |>
  filter(state %in% pop_final$state) |>
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
  select(state, mmwr_week, mmwr_year, cases) |>
  arrange(state, mmwr_year, mmwr_week)

# wrangle hospitalizations
hosp <- hosp_raw |> filter(jurisdiction %in% pop_final$state) |>
  filter(!is.na(new_covid_19_hospital)) |>
  rename(hosp = new_covid_19_hospital, state = jurisdiction) |>
  mutate(hosp = as.numeric(hosp),
         date = as_date(ymd_hms(collection_date))) |>
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
  select(mmwr_week, mmwr_year, hosp, state) |>
  group_by(state, mmwr_week, mmwr_year) |>
  summarize(hosp = sum(hosp), n = n(), .groups="drop") |>
  filter(!n < 7) |>
  select(-n) |>
  arrange(state, mmwr_year, mmwr_week) 

# create state name table
state_xwalk <- tibble(state = state.name) |>
  bind_cols(tibble(abb = state.abb)) |>
  bind_rows(tibble(state = c("District of Columbia", "Puerto Rico")
                   , abb = c("DC", "PR")))

# wrangle deaths
deaths <-
  deaths_raw |>
  filter(state %in% state_xwalk$state) |>
  mutate(deaths = as.numeric(covid_19_deaths),
         date = as_date(ymd_hms(start_date)),
         total_deaths = as.numeric(total_deaths),
         percent_expected_deaths = as.numeric(percent_of_expected_deaths)) |>
  mutate(mmwr_week = as.numeric(mmwr_week), mmwr_year = epiyear(date)) |>
  # mutate(state = state.abb[match(state, state.name)]) |>
  # mutate(state = case_when(state == "Puerto Rico" ~ "PR",
  #                          state == "District of Columbia" ~ "DC",
  #                          .default = state)) |>
  left_join(state_xwalk, by = c("state" = "state")) |>
  select(abb, mmwr_week, mmwr_year, deaths
         , total_deaths, percent_expected_deaths) |>
  rename(state = abb) |>
  arrange(state, mmwr_year, mmwr_week)
```

```{r}
# dates
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2024, 12, 2), 
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date)) 
```

```{r}
# join
dates_and_pop <- cross_join(all_dates, data.frame(state = unique(pop_final$state))) |> left_join(pop_final, by = c("state", "mmwr_year" = "year"))
 
dat <- dates_and_pop |>
  left_join(cases, by = c("state", "mmwr_week", "mmwr_year"))  |>
  left_join(hosp, by = c("state", "mmwr_week", "mmwr_year")) |>
  left_join(deaths, by = c("state", "mmwr_week", "mmwr_year")) |>
  arrange(state, date)

# save data frame
saveRDS(dat, file = "../data/dat.rds")
```

```{r}
# visualizing trends for covid waves
dat |>
  mutate(hosp_rate = hosp/population * 100000,
         case_rate = cases/population * 100000,
         death_rate = deaths/population * 100000) |>  # compute rates per 100,000
  pivot_longer(cols = c("hosp_rate", "case_rate", "death_rate"),
               names_to = "measure", values_to = "rate")  |> 
  ggplot(aes(x = date, y = rate, group=state)) + 
  geom_line() +
  ylab("Rate per 100,000 people") +
  facet_wrap(~ measure, scales = "free_y", ncol=1) +
  ggtitle("Trend plot for Covid cases, hospitalizations, and deaths") +
  scale_x_date(date_labels = "%b %Y", date_breaks = "2 months") + 
  theme(axis.text.x = element_text(angle = 60, hjust = 1))
```

Based on this plot, a COVID wave is determined to be when there is a peak in both deaths and cases. We have decided that the waves are start-May 30 2020, June 1 2020-August 31 2020, Sep 1 2020-Feb 28 2021, March 1 2021-June 30 2021, July 1 2021-October 31 2021, November 1 2021-March 31 2022, April 1 2022-December 31 2024.

```{r}
# adding waves to data set
dat_wave <- dat |>
  mutate(wave = case_when(date < "2020-06-01" ~ 1,
                           date >= "2020-06-01" & date < "2020-09-01" ~ 2,
                          date >= "2020-09-01" & date < "2021-03-01" ~ 3,
                          date >= "2021-03-01" & date < "2021-07-01" ~ 4,
                          date >= "2021-07-01" & date < "2021-11-01" ~ 5,
                          date >= "2021-11-01" & date < "2022-04-01" ~ 6,
                          date >= "2022-04-01" ~ 7))

# save data frame
saveRDS(dat_wave, file = "../data/dat_wave.rds")
```
