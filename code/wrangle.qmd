---
title: "wrangle"
format: html
editor: visual
---

```{r}
# census key
# census_key_source <- source("~/census_key.R")
# census_key <- census_key_source$value[[1]]
# source("funcs.R")
library(httr2)
library(janitor)
library(tidyverse)
library(stringr)
library(jsonlite)
library(purrr)
library(lubridate)

```

```{r}
# population
# read in csv with population data
pop1 <- read.csv("../data/NST-EST2023-ALLDATA.csv")

# wrangle pop data

# change state names, clean year names
pop2 <- pop1 |> 
  filter(STATE != 0) |>
  as_tibble() |>
  select(NAME, POPESTIMATE2020, POPESTIMATE2021, POPESTIMATE2022, POPESTIMATE2023) |>
  rename(state_name = NAME) |>
  pivot_longer(-state_name, names_to='year', values_to='population') |>
  mutate(year = str_remove(year, "POPESTIMATE")) |>
  mutate(across(-state_name, as.numeric)) |>
  mutate(state = state.abb[match(state_name, state.name)]) |>
  mutate(state = case_when(state_name == "Puerto Rico" ~ "PR",
                           state_name == "District of Columbia" ~ "DC",
                           .default = state))
head(pop2)

# 2024 data
twentyfour <- 336673595
pop1 |>
  filter(NAME == 'United States') |>
  select(NAME, POPESTIMATE2020, POPESTIMATE2021, POPESTIMATE2022, POPESTIMATE2023) |>
  pivot_longer(-NAME, names_to='year', values_to='population') |>
  mutate(year = str_remove(year, "POPESTIMATE")) |>
  mutate(across(-NAME, as.numeric))

url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"


url <- "https://github.com/datasciencelabs/2024/raw/refs/heads/main/data/regions.json"
regions <- fromJSON(url, simplifyDataFrame = FALSE)
regions <- map_df(regions, function(x) 
  data.frame(region=x$region, region_name=x$region_name,state_name=x$states))
regions <-  regions |> mutate(region_name = case_when(region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~ 
                                                        "NY, NJ, PR, and VI",
                                                      .default = region_name))

pop2 <- 
  left_join(pop2, regions, by = "state_name")
```

```{r}
# wrangle
# downloading data
cases_raw <- get_cdc_data("https://data.cdc.gov/resource/pwn4-m3yp.json")
hosp_raw <- get_cdc_data("https://data.cdc.gov/resource/39z2-9zu6.json")
deaths_raw <- get_cdc_data("https://data.cdc.gov/resource/r8kw-7aab.json")
vax_raw <- get_cdc_data("https://data.cdc.gov/resource/rh2h-3yt2.json")
  
# wrangle cases data
cases <- cases_raw |>
  mutate(cases = parse_number(new_cases),
         date = as_date(ymd_hms(end_date))) |>
  filter(state %in% population$state) |>
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
  select(state, mmwr_week, mmwr_year, cases) |>
  arrange(state, mmwr_year, mmwr_week)

# wrangle hospitalizations
hosp <- hosp_raw |> filter(jurisdiction %in% population$state) |>
  filter(!is.na(new_covid_19_hospital)) |>
  rename(hosp = new_covid_19_hospital, state = jurisdiction) |>
  mutate(hosp = as.numeric(hosp),
         date = as_date(ymd_hms(collection_date))) |>
  mutate(mmwr_week = epiweek(date), mmwr_year = epiyear(date)) |>
  select(mmwr_week, mmwr_year, hosp, state) |>
  group_by(state, mmwr_week, mmwr_year) |>
  summarize(hosp = sum(hosp), n = n(), .groups="drop") |>
  filter(!n < 7) |>
  select(-n) |>
  arrange(state, mmwr_year, mmwr_week) 

# wrangle deaths
deaths <-
  deaths_raw |>
  filter(state %in% population$state_name) |>
  mutate(deaths = as.numeric(covid_19_deaths),
         date = as_date(ymd_hms(start_date)),
         total_deaths = as.numeric(total_deaths),
         percent_expected_deaths = as.numeric(percent_of_expected_deaths)) |>
  mutate(mmwr_week = as.numeric(mmwr_week), mmwr_year = epiyear(date)) |>
  mutate(state = state.abb[match(state, state.name)]) |>
  mutate(state = case_when(state == "Puerto Rico" ~ "PR",
                           state == "District of Columbia" ~ "DC",
                           .default = state)) |>
  select(state, mmwr_week, mmwr_year, deaths, total_deaths, percent_expected_deaths) |>
  arrange(state, mmwr_year, mmwr_week)


```

```{r}
# dates
all_dates <- data.frame(date = seq(make_date(2020, 1, 25),
                                   make_date(2023, 12, 31), 
                                   by = "week")) |>
  mutate(date = ceiling_date(date, unit = "week", week_start = 7) - days(1)) |>
  mutate(mmwr_year = epiyear(date), mmwr_week = epiweek(date)) 
```

```{r}
# join
dates_and_pop <- cross_join(all_dates, data.frame(state = unique(pop2$state))) |> left_join(pop2, by = c("state", "mmwr_year" = "year"))
 
dat <- dates_and_pop |>
  left_join(cases, by = c("state", "mmwr_week", "mmwr_year"))  |>
  left_join(hosp, by = c("state", "mmwr_week", "mmwr_year")) |>
  left_join(deaths, by = c("state", "mmwr_week", "mmwr_year")) |>
  arrange(state, date)

# save data frame
# saveRDS(dat, file = "~/Harvard/BST260/final260project/data/dat.rds")
```

```{r}
dat <- readRDS(file = "../data/dat.rds")
```
